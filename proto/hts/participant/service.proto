syntax = "proto3";

package hts.participant;

option java_multiple_files = true;
option java_package = "app.onepass.apis";
option java_outer_classname = "ParticipantProto";
option go_package = "onepass.app/facility/hts/participant";

import "hts/common/common.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

message GetEventByIdRequest {
    int64 event_id = 1;
}

message StringInputRequest {
    string text = 1;
}

message UserWithEventRequest {
    int64 user_id = 1;
    int64 event_id = 2;
}

message SubmitAnswerForPostEventQuestionRequest {
    message Answer {
        int64 question_id = 1;
        string value = 2;
    }
    repeated Answer answers = 1;
    int64 user_event_id = 2;
}

message SubmitAnswerForPostEventQuestionResponse {
    repeated hts.common.Answer answers = 1;
}

message GenerateQRResponse {
    string data = 1;
}

message EventsResponse {
    repeated hts.common.Event event = 1;
}

message IsEventAvailableRequest {
    int64 event_id = 1;
    google.protobuf.Timestamp date = 2;
}

message GetUpcomingEventsRequest {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
}


message GetObjectByIdRequest {
    int64 id = 1;
}

message GenerateQRRequest {
    int64 user_event_id = 1;
    int64 user_id = 2;
    int64 event_id = 3;
}

service ParticipantService {
    // Check whether event's start date is before specified date
    rpc IsEventAvailable(IsEventAvailableRequest) returns (google.protobuf.BoolValue);

    // Let user join / cancel events
    rpc JoinEvent(UserWithEventRequest) returns (hts.common.UserEvent);
    rpc CancelEvent(UserWithEventRequest) returns (hts.common.Event);

    // Let user create then submit Post Question
    rpc SubmitAnswerForPostEventQuestion(SubmitAnswerForPostEventQuestionRequest) returns (SubmitAnswerForPostEventQuestionResponse);

    // Return event object from event_id
    rpc GetEventById(GetEventByIdRequest) returns (hts.common.Event);
    // Return all event in database
    rpc GetAllEvents(google.protobuf.Empty) returns (EventsResponse);
    // Return 10 random events --> waiting for machine learning implementation
    rpc GetSuggestedEvents(google.protobuf.Empty) returns (EventsResponse);
    // Get events from range of date
    rpc GetUpcomingEvents(GetUpcomingEventsRequest) returns (EventsResponse);

    // Get events from search string
    rpc GetEventsByStringOfName(StringInputRequest) returns (EventsResponse);
    // Get events from specified Tag
    rpc GetEventsByTagId(GetObjectByIdRequest) returns (EventsResponse);
    // Get event from specified organization
    rpc GetEventsByOrganizationId(GetObjectByIdRequest) returns (EventsResponse);
    // Get event from specified facility
    rpc GetEventsByFacilityId(GetObjectByIdRequest) returns (EventsResponse);
    // Get event from specified date
    rpc GetEventsByDate(google.protobuf.Timestamp) returns (EventsResponse);

    // Get location by location_id
    rpc GetLocationById(GetObjectByIdRequest) returns (hts.common.Location);

    // Generate QR from combination of ID, User_ID, Event_ID
    rpc GenerateQR(GenerateQRRequest) returns (GenerateQRResponse);

    // Ping methods to check signal
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.BoolValue);
}
