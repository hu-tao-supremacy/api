syntax = "proto3";

package hts.participant;

option java_multiple_files = true;
option java_package = "app.onepass.apis";
option java_outer_classname = "ParticipantProto";
option go_package = "onepass.app/facility/hts/participant";

import "hts/common/common.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

message GetEventByIdRequest {
    int32 event_id = 1;
}

message StringInputRequest {
    string text = 1;
}

message UserWithEventRequest {
    int32 user_id = 1;
    int32 event_id = 2;
}

message SubmitAnswerForPostEventQuestionRequest {
    message Answer {
        int32 question_id = 1;
        string value = 2;
    }
    repeated Answer answers = 1;
    int32 user_event_id = 2;
}

message SubmitAnswerForPostEventQuestionResponse {
    repeated hts.common.Answer answers = 1;
}

message GenerateQRResponse {
    string data = 1;
}

message EventsResponse {
    repeated hts.common.Event event = 1;
}

message IsEventAvailableRequest {
    int32 event_id = 1;
    google.protobuf.Timestamp date = 2;
}

message GetUpcomingEventsRequest {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
}

message GenerateQRRequest {
    int32 user_event_id = 1;
    int32 user_id = 2;
    int32 event_id = 3;
}

message GetTagsByEventIdResponse {
    repeated hts.common.Tag tags = 1;
}

message GetApprovedUserByEventIdResponse {
    repeated hts.common.User users= 1;
}

message GetRatingByEventIdResponse {
    repeated int32 result = 1;
}

message GetEventDurationsByEventIdResponse {
    repeated hts.common.EventDuration event_durations = 1;
}

message GetUserAnswersByQuestionIdRequest {
    int32 question_id = 1;
    int32 user_id = 2;
}

message GetQuestionGroupsByEventIdResponse {
    repeated hts.common.QuestionGroup question_groups = 1;
}

message GetQuestionsByQuestionGroupIdResponse {
    repeated hts.common.Question questions = 1;
}

message GetAnswersByQuestionIdResponse {
    repeated hts.common.Answer answers = 1;
}

service ParticipantService {
    // Check whether event's start date is before specified date
    rpc IsEventAvailable(IsEventAvailableRequest) returns (google.protobuf.BoolValue);

    // Let user join / cancel events
    rpc JoinEvent(UserWithEventRequest) returns (hts.common.UserEvent);
    rpc CancelEvent(UserWithEventRequest) returns (hts.common.Event);

    // Let user create then submit Post Question
    rpc SubmitAnswerForPostEventQuestion(SubmitAnswerForPostEventQuestionRequest) returns (SubmitAnswerForPostEventQuestionResponse);

    // Return event object from event_id
    rpc GetEventById(GetEventByIdRequest) returns (hts.common.Event);
    // Return all event in database
    rpc GetAllEvents(google.protobuf.Empty) returns (EventsResponse);
    // Return 10 random events --> waiting for machine learning implementation
    rpc GetSuggestedEvents(google.protobuf.Empty) returns (EventsResponse);
    // Get events from range of date
    rpc GetUpcomingEvents(GetUpcomingEventsRequest) returns (EventsResponse);

    // Get events from search string
    rpc GetEventsByStringOfName(StringInputRequest) returns (EventsResponse);
    // Get events from specified Tag
    rpc GetEventsByTagId(hts.common.GetObjectByIdRequest) returns (EventsResponse);
    // Get event from specified organization
    rpc GetEventsByOrganizationId(hts.common.GetObjectByIdRequest) returns (EventsResponse);
    // Get event from specified facility
    rpc GetEventsByFacilityId(hts.common.GetObjectByIdRequest) returns (EventsResponse);
    // Get event from specified date
    rpc GetEventsByDate(google.protobuf.Timestamp) returns (EventsResponse);

    // Get location by location_id
    rpc GetLocationById(hts.common.GetObjectByIdRequest) returns (hts.common.Location);

    // Get Tags, Rating, Approved User, Durations from event_id
    rpc GetTagsByEventId(hts.common.GetObjectByIdRequest) returns (GetTagsByEventIdResponse);
    rpc GetRatingByEventId(hts.common.GetObjectByIdRequest) returns (GetRatingByEventIdResponse);
    rpc GetApprovedUserByEventId(hts.common.GetObjectByIdRequest) returns (GetApprovedUserByEventIdResponse);
    rpc GetEventDurationsByEventId(hts.common.GetObjectByIdRequest) returns (GetEventDurationsByEventIdResponse);

    // Get Questions
    rpc GetQuestionGroupsByEventId(hts.common.GetObjectByIdRequest) returns (GetQuestionGroupsByEventIdResponse);
    rpc GetQuestionsByQuestionGroupId(hts.common.GetObjectByIdRequest) returns (GetQuestionsByQuestionGroupIdResponse);
    rpc GetAnswersByQuestionId(hts.common.GetObjectByIdRequest) returns (GetAnswersByQuestionIdResponse);

    // Generate QR from combination of ID, User_ID, Event_ID
    rpc GenerateQR(GenerateQRRequest) returns (GenerateQRResponse);

    // Ping methods to check signal
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.BoolValue);
}
