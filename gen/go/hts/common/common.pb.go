// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: hts/common/common.proto

package common

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DayOfWeek int32

const (
	DayOfWeek_DAY_OF_WEEK_UNSPECIFIED DayOfWeek = 0
	DayOfWeek_SUN                     DayOfWeek = 1
	DayOfWeek_MON                     DayOfWeek = 2
	DayOfWeek_TUE                     DayOfWeek = 3
	DayOfWeek_WED                     DayOfWeek = 4
	DayOfWeek_THU                     DayOfWeek = 5
	DayOfWeek_FRI                     DayOfWeek = 6
	DayOfWeek_SAT                     DayOfWeek = 7
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "DAY_OF_WEEK_UNSPECIFIED",
		1: "SUN",
		2: "MON",
		3: "TUE",
		4: "WED",
		5: "THU",
		6: "FRI",
		7: "SAT",
	}
	DayOfWeek_value = map[string]int32{
		"DAY_OF_WEEK_UNSPECIFIED": 0,
		"SUN":                     1,
		"MON":                     2,
		"TUE":                     3,
		"WED":                     4,
		"THU":                     5,
		"FRI":                     6,
		"SAT":                     7,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_hts_common_common_proto_enumTypes[0].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_hts_common_common_proto_enumTypes[0]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{0}
}

type AnswerType int32

const (
	AnswerType_ANSWER_TYPE_UNSPECIFIED AnswerType = 0
	AnswerType_SCALE                   AnswerType = 1
	AnswerType_TEXT                    AnswerType = 2
)

// Enum value maps for AnswerType.
var (
	AnswerType_name = map[int32]string{
		0: "ANSWER_TYPE_UNSPECIFIED",
		1: "SCALE",
		2: "TEXT",
	}
	AnswerType_value = map[string]int32{
		"ANSWER_TYPE_UNSPECIFIED": 0,
		"SCALE":                   1,
		"TEXT":                    2,
	}
)

func (x AnswerType) Enum() *AnswerType {
	p := new(AnswerType)
	*p = x
	return p
}

func (x AnswerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnswerType) Descriptor() protoreflect.EnumDescriptor {
	return file_hts_common_common_proto_enumTypes[1].Descriptor()
}

func (AnswerType) Type() protoreflect.EnumType {
	return &file_hts_common_common_proto_enumTypes[1]
}

func (x AnswerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnswerType.Descriptor instead.
func (AnswerType) EnumDescriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{1}
}

type QuestionGroupType int32

const (
	QuestionGroupType_QUESTION_GROUP_TYPE_UNSPECIFIED QuestionGroupType = 0
	QuestionGroupType_PRE_EVENT                       QuestionGroupType = 1
	QuestionGroupType_POST_EVENT                      QuestionGroupType = 2
)

// Enum value maps for QuestionGroupType.
var (
	QuestionGroupType_name = map[int32]string{
		0: "QUESTION_GROUP_TYPE_UNSPECIFIED",
		1: "PRE_EVENT",
		2: "POST_EVENT",
	}
	QuestionGroupType_value = map[string]int32{
		"QUESTION_GROUP_TYPE_UNSPECIFIED": 0,
		"PRE_EVENT":                       1,
		"POST_EVENT":                      2,
	}
)

func (x QuestionGroupType) Enum() *QuestionGroupType {
	p := new(QuestionGroupType)
	*p = x
	return p
}

func (x QuestionGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_hts_common_common_proto_enumTypes[2].Descriptor()
}

func (QuestionGroupType) Type() protoreflect.EnumType {
	return &file_hts_common_common_proto_enumTypes[2]
}

func (x QuestionGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionGroupType.Descriptor instead.
func (QuestionGroupType) EnumDescriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{2}
}

type Gender int32

const (
	Gender_GENDER_UNSPECIFIED Gender = 0
	Gender_M                  Gender = 1
	Gender_F                  Gender = 2
	Gender_NS                 Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "M",
		2: "F",
		3: "NS",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"M":                  1,
		"F":                  2,
		"NS":                 3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_hts_common_common_proto_enumTypes[3].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_hts_common_common_proto_enumTypes[3]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{3}
}

type Permission int32

const (
	Permission_PERMISSION_UNSPECIFIED     Permission = 0
	Permission_ORGANIZATION_UPDATE        Permission = 1
	Permission_ORGANIZATION_REMOVE        Permission = 2
	Permission_ORGANIZATION_MEMBER_ADD    Permission = 3
	Permission_ORGANIZATION_MEMBER_REMOVE Permission = 4
	Permission_EVENT_CREATE               Permission = 5
	Permission_EVENT_UPDATE               Permission = 6
	Permission_EVENT_REMOVE               Permission = 7
	Permission_TAG_CREATE                 Permission = 8
	Permission_TAG_REMOVE                 Permission = 9
	Permission_EVENT_TAG_UPDATE           Permission = 10
	Permission_FACILITY_CREATE            Permission = 11
	Permission_FACILITY_UPDATE            Permission = 12
	Permission_FACILITY_REMOVE            Permission = 13
)

// Enum value maps for Permission.
var (
	Permission_name = map[int32]string{
		0:  "PERMISSION_UNSPECIFIED",
		1:  "ORGANIZATION_UPDATE",
		2:  "ORGANIZATION_REMOVE",
		3:  "ORGANIZATION_MEMBER_ADD",
		4:  "ORGANIZATION_MEMBER_REMOVE",
		5:  "EVENT_CREATE",
		6:  "EVENT_UPDATE",
		7:  "EVENT_REMOVE",
		8:  "TAG_CREATE",
		9:  "TAG_REMOVE",
		10: "EVENT_TAG_UPDATE",
		11: "FACILITY_CREATE",
		12: "FACILITY_UPDATE",
		13: "FACILITY_REMOVE",
	}
	Permission_value = map[string]int32{
		"PERMISSION_UNSPECIFIED":     0,
		"ORGANIZATION_UPDATE":        1,
		"ORGANIZATION_REMOVE":        2,
		"ORGANIZATION_MEMBER_ADD":    3,
		"ORGANIZATION_MEMBER_REMOVE": 4,
		"EVENT_CREATE":               5,
		"EVENT_UPDATE":               6,
		"EVENT_REMOVE":               7,
		"TAG_CREATE":                 8,
		"TAG_REMOVE":                 9,
		"EVENT_TAG_UPDATE":           10,
		"FACILITY_CREATE":            11,
		"FACILITY_UPDATE":            12,
		"FACILITY_REMOVE":            13,
	}
)

func (x Permission) Enum() *Permission {
	p := new(Permission)
	*p = x
	return p
}

func (x Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_hts_common_common_proto_enumTypes[4].Descriptor()
}

func (Permission) Type() protoreflect.EnumType {
	return &file_hts_common_common_proto_enumTypes[4]
}

func (x Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Permission.Descriptor instead.
func (Permission) EnumDescriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{4}
}

type UserEvent_Status int32

const (
	UserEvent_STATUS_UNSPECIFIED UserEvent_Status = 0
	UserEvent_PENDING            UserEvent_Status = 1
	UserEvent_APPROVED           UserEvent_Status = 2
	UserEvent_REJECTED           UserEvent_Status = 3
)

// Enum value maps for UserEvent_Status.
var (
	UserEvent_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "APPROVED",
		3: "REJECTED",
	}
	UserEvent_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"APPROVED":           2,
		"REJECTED":           3,
	}
)

func (x UserEvent_Status) Enum() *UserEvent_Status {
	p := new(UserEvent_Status)
	*p = x
	return p
}

func (x UserEvent_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserEvent_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_hts_common_common_proto_enumTypes[5].Descriptor()
}

func (UserEvent_Status) Type() protoreflect.EnumType {
	return &file_hts_common_common_proto_enumTypes[5]
}

func (x UserEvent_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserEvent_Status.Descriptor instead.
func (UserEvent_Status) EnumDescriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{9, 0}
}

type FacilityRequest_Status int32

const (
	FacilityRequest_STATUS_UNSPECIFIED FacilityRequest_Status = 0
	FacilityRequest_PENDING            FacilityRequest_Status = 1
	FacilityRequest_APPROVED           FacilityRequest_Status = 2
	FacilityRequest_REJECTED           FacilityRequest_Status = 3
)

// Enum value maps for FacilityRequest_Status.
var (
	FacilityRequest_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "APPROVED",
		3: "REJECTED",
	}
	FacilityRequest_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"APPROVED":           2,
		"REJECTED":           3,
	}
)

func (x FacilityRequest_Status) Enum() *FacilityRequest_Status {
	p := new(FacilityRequest_Status)
	*p = x
	return p
}

func (x FacilityRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacilityRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_hts_common_common_proto_enumTypes[6].Descriptor()
}

func (FacilityRequest_Status) Type() protoreflect.EnumType {
	return &file_hts_common_common_proto_enumTypes[6]
}

func (x FacilityRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacilityRequest_Status.Descriptor instead.
func (FacilityRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{16, 0}
}

type OperatingHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHour  int32     `protobuf:"varint,1,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	FinishHour int32     `protobuf:"varint,2,opt,name=finish_hour,json=finishHour,proto3" json:"finish_hour,omitempty"`
	Day        DayOfWeek `protobuf:"varint,3,opt,name=day,proto3,enum=hts.common.DayOfWeek" json:"day,omitempty"`
}

func (x *OperatingHour) Reset() {
	*x = OperatingHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatingHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatingHour) ProtoMessage() {}

func (x *OperatingHour) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatingHour.ProtoReflect.Descriptor instead.
func (*OperatingHour) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{0}
}

func (x *OperatingHour) GetStartHour() int32 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

func (x *OperatingHour) GetFinishHour() int32 {
	if x != nil {
		return x.FinishHour
	}
	return 0
}

func (x *OperatingHour) GetDay() DayOfWeek {
	if x != nil {
		return x.Day
	}
	return DayOfWeek_DAY_OF_WEEK_UNSPECIFIED
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName         string                  `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string                  `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email             string                  `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Nickname          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ChulaId           *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=chula_id,json=chulaId,proto3" json:"chula_id,omitempty"`
	IsChulaStudent    bool                    `protobuf:"varint,7,opt,name=is_chula_student,json=isChulaStudent,proto3" json:"is_chula_student,omitempty"`
	Gender            Gender                  `protobuf:"varint,8,opt,name=gender,proto3,enum=hts.common.Gender" json:"gender,omitempty"`
	Address           *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	ProfilePictureUrl *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	DidSetup          bool                    `protobuf:"varint,11,opt,name=did_setup,json=didSetup,proto3" json:"did_setup,omitempty"`
	District          *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=district,proto3" json:"district,omitempty"`
	ZipCode           *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	PhoneNumber       *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Province          *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=province,proto3" json:"province,omitempty"`
	AcademicYear      *wrapperspb.Int32Value  `protobuf:"bytes,16,opt,name=academic_year,json=academicYear,proto3" json:"academic_year,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetNickname() *wrapperspb.StringValue {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *User) GetChulaId() *wrapperspb.StringValue {
	if x != nil {
		return x.ChulaId
	}
	return nil
}

func (x *User) GetIsChulaStudent() bool {
	if x != nil {
		return x.IsChulaStudent
	}
	return false
}

func (x *User) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *User) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *User) GetProfilePictureUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return nil
}

func (x *User) GetDidSetup() bool {
	if x != nil {
		return x.DidSetup
	}
	return false
}

func (x *User) GetDistrict() *wrapperspb.StringValue {
	if x != nil {
		return x.District
	}
	return nil
}

func (x *User) GetZipCode() *wrapperspb.StringValue {
	if x != nil {
		return x.ZipCode
	}
	return nil
}

func (x *User) GetPhoneNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *User) GetProvince() *wrapperspb.StringValue {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *User) GetAcademicYear() *wrapperspb.Int32Value {
	if x != nil {
		return x.AcademicYear
	}
	return nil
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsVerified          bool                    `protobuf:"varint,3,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	Abbreviation        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	Advisor             *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=advisor,proto3" json:"advisor,omitempty"`
	AssociatedFaculty   *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=associated_faculty,json=associatedFaculty,proto3" json:"associated_faculty,omitempty"`
	Description         *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	FacebookPage        *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=facebook_page,json=facebookPage,proto3" json:"facebook_page,omitempty"`
	Instagram           *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=instagram,proto3" json:"instagram,omitempty"`
	LineOfficialAccount *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=line_official_account,json=lineOfficialAccount,proto3" json:"line_official_account,omitempty"`
	Email               *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	ContactFullName     *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=contact_full_name,json=contactFullName,proto3" json:"contact_full_name,omitempty"`
	ContactEmail        *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	ContactPhoneNumber  *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=contact_phone_number,json=contactPhoneNumber,proto3" json:"contact_phone_number,omitempty"`
	ContactLineId       *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=contact_line_id,json=contactLineId,proto3" json:"contact_line_id,omitempty"`
	ProfilePictureUrl   *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	ProfilePictureHash  *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=profile_picture_hash,json=profilePictureHash,proto3" json:"profile_picture_hash,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{2}
}

func (x *Organization) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *Organization) GetAbbreviation() *wrapperspb.StringValue {
	if x != nil {
		return x.Abbreviation
	}
	return nil
}

func (x *Organization) GetAdvisor() *wrapperspb.StringValue {
	if x != nil {
		return x.Advisor
	}
	return nil
}

func (x *Organization) GetAssociatedFaculty() *wrapperspb.StringValue {
	if x != nil {
		return x.AssociatedFaculty
	}
	return nil
}

func (x *Organization) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Organization) GetFacebookPage() *wrapperspb.StringValue {
	if x != nil {
		return x.FacebookPage
	}
	return nil
}

func (x *Organization) GetInstagram() *wrapperspb.StringValue {
	if x != nil {
		return x.Instagram
	}
	return nil
}

func (x *Organization) GetLineOfficialAccount() *wrapperspb.StringValue {
	if x != nil {
		return x.LineOfficialAccount
	}
	return nil
}

func (x *Organization) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Organization) GetContactFullName() *wrapperspb.StringValue {
	if x != nil {
		return x.ContactFullName
	}
	return nil
}

func (x *Organization) GetContactEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.ContactEmail
	}
	return nil
}

func (x *Organization) GetContactPhoneNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.ContactPhoneNumber
	}
	return nil
}

func (x *Organization) GetContactLineId() *wrapperspb.StringValue {
	if x != nil {
		return x.ContactLineId
	}
	return nil
}

func (x *Organization) GetProfilePictureUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return nil
}

func (x *Organization) GetProfilePictureHash() *wrapperspb.StringValue {
	if x != nil {
		return x.ProfilePictureHash
	}
	return nil
}

type QuestionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId int32             `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Type    QuestionGroupType `protobuf:"varint,3,opt,name=type,proto3,enum=hts.common.QuestionGroupType" json:"type,omitempty"`
	Seq     int32             `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	Title   string            `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *QuestionGroup) Reset() {
	*x = QuestionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionGroup) ProtoMessage() {}

func (x *QuestionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionGroup.ProtoReflect.Descriptor instead.
func (*QuestionGroup) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{3}
}

func (x *QuestionGroup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionGroup) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *QuestionGroup) GetType() QuestionGroupType {
	if x != nil {
		return x.Type
	}
	return QuestionGroupType_QUESTION_GROUP_TYPE_UNSPECIFIED
}

func (x *QuestionGroup) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *QuestionGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QuestionGroupId int32      `protobuf:"varint,2,opt,name=question_group_id,json=questionGroupId,proto3" json:"question_group_id,omitempty"`
	Seq             int32      `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	AnswerType      AnswerType `protobuf:"varint,4,opt,name=answer_type,json=answerType,proto3,enum=hts.common.AnswerType" json:"answer_type,omitempty"`
	IsOptional      bool       `protobuf:"varint,5,opt,name=is_optional,json=isOptional,proto3" json:"is_optional,omitempty"`
	Title           string     `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle        string     `protobuf:"bytes,7,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{4}
}

func (x *Question) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Question) GetQuestionGroupId() int32 {
	if x != nil {
		return x.QuestionGroupId
	}
	return 0
}

func (x *Question) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Question) GetAnswerType() AnswerType {
	if x != nil {
		return x.AnswerType
	}
	return AnswerType_ANSWER_TYPE_UNSPECIFIED
}

func (x *Question) GetIsOptional() bool {
	if x != nil {
		return x.IsOptional
	}
	return false
}

func (x *Question) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Question) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

type UserOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId int32 `protobuf:"varint,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *UserOrganization) Reset() {
	*x = UserOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrganization) ProtoMessage() {}

func (x *UserOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrganization.ProtoReflect.Descriptor instead.
func (*UserOrganization) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{5}
}

func (x *UserOrganization) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserOrganization) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserOrganization) GetOrganizationId() int32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId   int32                   `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	LocationId       *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	Description      string                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Name             string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	CoverImageUrl    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=cover_image_url,json=coverImageUrl,proto3" json:"cover_image_url,omitempty"`
	CoverImageHash   *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=cover_image_hash,json=coverImageHash,proto3" json:"cover_image_hash,omitempty"`
	PosterImageUrl   *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=poster_image_url,json=posterImageUrl,proto3" json:"poster_image_url,omitempty"`
	PosterImageHash  *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=poster_image_hash,json=posterImageHash,proto3" json:"poster_image_hash,omitempty"`
	Contact          *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=contact,proto3" json:"contact,omitempty"`
	ProfileImageUrl  *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
	ProfileImageHash *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=profile_image_hash,json=profileImageHash,proto3" json:"profile_image_hash,omitempty"`
	AttendeeLimit    int32                   `protobuf:"varint,13,opt,name=attendee_limit,json=attendeeLimit,proto3" json:"attendee_limit,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{6}
}

func (x *Event) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetOrganizationId() int32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Event) GetLocationId() *wrapperspb.Int32Value {
	if x != nil {
		return x.LocationId
	}
	return nil
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetCoverImageUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.CoverImageUrl
	}
	return nil
}

func (x *Event) GetCoverImageHash() *wrapperspb.StringValue {
	if x != nil {
		return x.CoverImageHash
	}
	return nil
}

func (x *Event) GetPosterImageUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.PosterImageUrl
	}
	return nil
}

func (x *Event) GetPosterImageHash() *wrapperspb.StringValue {
	if x != nil {
		return x.PosterImageHash
	}
	return nil
}

func (x *Event) GetContact() *wrapperspb.StringValue {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Event) GetProfileImageUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ProfileImageUrl
	}
	return nil
}

func (x *Event) GetProfileImageHash() *wrapperspb.StringValue {
	if x != nil {
		return x.ProfileImageHash
	}
	return nil
}

func (x *Event) GetAttendeeLimit() int32 {
	if x != nil {
		return x.AttendeeLimit
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                       string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GoogleMapUrl               string                  `protobuf:"bytes,3,opt,name=google_map_url,json=googleMapUrl,proto3" json:"google_map_url,omitempty"`
	Description                *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TravelInformationImageUrl  *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=travel_information_image_url,json=travelInformationImageUrl,proto3" json:"travel_information_image_url,omitempty"`
	TravelInformationImageHash *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=travel_information_image_hash,json=travelInformationImageHash,proto3" json:"travel_information_image_hash,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{7}
}

func (x *Location) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location) GetGoogleMapUrl() string {
	if x != nil {
		return x.GoogleMapUrl
	}
	return ""
}

func (x *Location) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Location) GetTravelInformationImageUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.TravelInformationImageUrl
	}
	return nil
}

func (x *Location) GetTravelInformationImageHash() *wrapperspb.StringValue {
	if x != nil {
		return x.TravelInformationImageHash
	}
	return nil
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserEventId int32  `protobuf:"varint,2,opt,name=user_event_id,json=userEventId,proto3" json:"user_event_id,omitempty"`
	QuestionId  int32  `protobuf:"varint,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{8}
}

func (x *Answer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Answer) GetUserEventId() int32 {
	if x != nil {
		return x.UserEventId
	}
	return 0
}

func (x *Answer) GetQuestionId() int32 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *Answer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int32                   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId    int32                   `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Rating     *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=rating,proto3" json:"rating,omitempty"`
	Ticket     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Status     UserEvent_Status        `protobuf:"varint,6,opt,name=status,proto3,enum=hts.common.UserEvent_Status" json:"status,omitempty"`
	IsInternal bool                    `protobuf:"varint,7,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{9}
}

func (x *UserEvent) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserEvent) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserEvent) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *UserEvent) GetRating() *wrapperspb.Int32Value {
	if x != nil {
		return x.Rating
	}
	return nil
}

func (x *UserEvent) GetTicket() *wrapperspb.StringValue {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *UserEvent) GetStatus() UserEvent_Status {
	if x != nil {
		return x.Status
	}
	return UserEvent_STATUS_UNSPECIFIED
}

func (x *UserEvent) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

type EventDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId int32                  `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Start   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	Finish  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=finish,proto3" json:"finish,omitempty"`
}

func (x *EventDuration) Reset() {
	*x = EventDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDuration) ProtoMessage() {}

func (x *EventDuration) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDuration.ProtoReflect.Descriptor instead.
func (*EventDuration) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{10}
}

func (x *EventDuration) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventDuration) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *EventDuration) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *EventDuration) GetFinish() *timestamppb.Timestamp {
	if x != nil {
		return x.Finish
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{11}
}

func (x *Tag) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EventTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId int32 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TagId   int32 `protobuf:"varint,3,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
}

func (x *EventTag) Reset() {
	*x = EventTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTag) ProtoMessage() {}

func (x *EventTag) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTag.ProtoReflect.Descriptor instead.
func (*EventTag) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{12}
}

func (x *EventTag) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventTag) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *EventTag) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type OrganizationPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId int32      `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Permission     Permission `protobuf:"varint,3,opt,name=permission,proto3,enum=hts.common.Permission" json:"permission,omitempty"`
}

func (x *OrganizationPermission) Reset() {
	*x = OrganizationPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationPermission) ProtoMessage() {}

func (x *OrganizationPermission) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationPermission.ProtoReflect.Descriptor instead.
func (*OrganizationPermission) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{13}
}

func (x *OrganizationPermission) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrganizationPermission) GetOrganizationId() int32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *OrganizationPermission) GetPermission() Permission {
	if x != nil {
		return x.Permission
	}
	return Permission_PERMISSION_UNSPECIFIED
}

type UserPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PermissionName Permission `protobuf:"varint,3,opt,name=permission_name,json=permissionName,proto3,enum=hts.common.Permission" json:"permission_name,omitempty"`
}

func (x *UserPermission) Reset() {
	*x = UserPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermission) ProtoMessage() {}

func (x *UserPermission) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermission.ProtoReflect.Descriptor instead.
func (*UserPermission) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{14}
}

func (x *UserPermission) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPermission) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPermission) GetPermissionName() Permission {
	if x != nil {
		return x.PermissionName
	}
	return Permission_PERMISSION_UNSPECIFIED
}

type UserInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TagId  int32 `protobuf:"varint,3,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
}

func (x *UserInterest) Reset() {
	*x = UserInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInterest) ProtoMessage() {}

func (x *UserInterest) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInterest.ProtoReflect.Descriptor instead.
func (*UserInterest) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{15}
}

func (x *UserInterest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInterest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInterest) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type FacilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId      int32                   `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	FacilityId   int32                   `protobuf:"varint,3,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	Status       FacilityRequest_Status  `protobuf:"varint,4,opt,name=status,proto3,enum=hts.common.FacilityRequest_Status" json:"status,omitempty"`
	RejectReason *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Start        *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	Finish       *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=finish,proto3" json:"finish,omitempty"`
}

func (x *FacilityRequest) Reset() {
	*x = FacilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacilityRequest) ProtoMessage() {}

func (x *FacilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacilityRequest.ProtoReflect.Descriptor instead.
func (*FacilityRequest) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{16}
}

func (x *FacilityRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FacilityRequest) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *FacilityRequest) GetFacilityId() int32 {
	if x != nil {
		return x.FacilityId
	}
	return 0
}

func (x *FacilityRequest) GetStatus() FacilityRequest_Status {
	if x != nil {
		return x.Status
	}
	return FacilityRequest_STATUS_UNSPECIFIED
}

func (x *FacilityRequest) GetRejectReason() *wrapperspb.StringValue {
	if x != nil {
		return x.RejectReason
	}
	return nil
}

func (x *FacilityRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *FacilityRequest) GetFinish() *timestamppb.Timestamp {
	if x != nil {
		return x.Finish
	}
	return nil
}

type Facility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId int32            `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Latitude       float64          `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64          `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	OperatingHours []*OperatingHour `protobuf:"bytes,6,rep,name=operating_hours,json=operatingHours,proto3" json:"operating_hours,omitempty"`
	Description    string           `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Facility) Reset() {
	*x = Facility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facility) ProtoMessage() {}

func (x *Facility) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facility.ProtoReflect.Descriptor instead.
func (*Facility) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{17}
}

func (x *Facility) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Facility) GetOrganizationId() int32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Facility) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Facility) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Facility) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Facility) GetOperatingHours() []*OperatingHour {
	if x != nil {
		return x.OperatingHours
	}
	return nil
}

func (x *Facility) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetObjectByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetObjectByIdRequest) Reset() {
	*x = GetObjectByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectByIdRequest) ProtoMessage() {}

func (x *GetObjectByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectByIdRequest.ProtoReflect.Descriptor instead.
func (*GetObjectByIdRequest) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{18}
}

func (x *GetObjectByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetObjectByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetObjectByNameRequest) Reset() {
	*x = GetObjectByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hts_common_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectByNameRequest) ProtoMessage() {}

func (x *GetObjectByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hts_common_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectByNameRequest.ProtoReflect.Descriptor instead.
func (*GetObjectByNameRequest) Descriptor() ([]byte, []int) {
	return file_hts_common_common_proto_rawDescGZIP(), []int{19}
}

func (x *GetObjectByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_hts_common_common_proto protoreflect.FileDescriptor

var file_hts_common_common_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x68, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x22, 0x84, 0x06, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6c, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6c, 0x61, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x75, 0x6c, 0x61, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x68, 0x75, 0x6c,
	0x61, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x68, 0x74, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64,
	0x69, 0x64, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x59, 0x65, 0x61, 0x72, 0x22, 0xa0, 0x08, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x07, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4e, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x37, 0x0a,
	0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x64, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xc9, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x10,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x11,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x48,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x55,
	0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x5f, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x73, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x49, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x29, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x0f, 0x46,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x68, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22,
	0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x46,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x6f,
	0x75, 0x72, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x67, 0x0a, 0x09, 0x44, 0x61,
	0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x59, 0x5f, 0x4f,
	0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x55, 0x45, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48, 0x55, 0x10,
	0x05, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x41,
	0x54, 0x10, 0x07, 0x2a, 0x3e, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x02, 0x2a, 0x57, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x52, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x4f, 0x53, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x36, 0x0a, 0x06,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05,
	0x0a, 0x01, 0x4d, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x46, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x53, 0x10, 0x03, 0x2a, 0xc2, 0x02, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41,
	0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41,
	0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x0d, 0x42, 0x42, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x2e, 0x6f, 0x6e, 0x65, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x42, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1f, 0x6f, 0x6e,
	0x65, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2f, 0x68, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hts_common_common_proto_rawDescOnce sync.Once
	file_hts_common_common_proto_rawDescData = file_hts_common_common_proto_rawDesc
)

func file_hts_common_common_proto_rawDescGZIP() []byte {
	file_hts_common_common_proto_rawDescOnce.Do(func() {
		file_hts_common_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_hts_common_common_proto_rawDescData)
	})
	return file_hts_common_common_proto_rawDescData
}

var file_hts_common_common_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_hts_common_common_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_hts_common_common_proto_goTypes = []interface{}{
	(DayOfWeek)(0),                 // 0: hts.common.DayOfWeek
	(AnswerType)(0),                // 1: hts.common.AnswerType
	(QuestionGroupType)(0),         // 2: hts.common.QuestionGroupType
	(Gender)(0),                    // 3: hts.common.Gender
	(Permission)(0),                // 4: hts.common.Permission
	(UserEvent_Status)(0),          // 5: hts.common.UserEvent.Status
	(FacilityRequest_Status)(0),    // 6: hts.common.FacilityRequest.Status
	(*OperatingHour)(nil),          // 7: hts.common.OperatingHour
	(*User)(nil),                   // 8: hts.common.User
	(*Organization)(nil),           // 9: hts.common.Organization
	(*QuestionGroup)(nil),          // 10: hts.common.QuestionGroup
	(*Question)(nil),               // 11: hts.common.Question
	(*UserOrganization)(nil),       // 12: hts.common.UserOrganization
	(*Event)(nil),                  // 13: hts.common.Event
	(*Location)(nil),               // 14: hts.common.Location
	(*Answer)(nil),                 // 15: hts.common.Answer
	(*UserEvent)(nil),              // 16: hts.common.UserEvent
	(*EventDuration)(nil),          // 17: hts.common.EventDuration
	(*Tag)(nil),                    // 18: hts.common.Tag
	(*EventTag)(nil),               // 19: hts.common.EventTag
	(*OrganizationPermission)(nil), // 20: hts.common.OrganizationPermission
	(*UserPermission)(nil),         // 21: hts.common.UserPermission
	(*UserInterest)(nil),           // 22: hts.common.UserInterest
	(*FacilityRequest)(nil),        // 23: hts.common.FacilityRequest
	(*Facility)(nil),               // 24: hts.common.Facility
	(*GetObjectByIdRequest)(nil),   // 25: hts.common.GetObjectByIdRequest
	(*GetObjectByNameRequest)(nil), // 26: hts.common.GetObjectByNameRequest
	(*wrapperspb.StringValue)(nil), // 27: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),  // 28: google.protobuf.Int32Value
	(*timestamppb.Timestamp)(nil),  // 29: google.protobuf.Timestamp
}
var file_hts_common_common_proto_depIdxs = []int32{
	0,  // 0: hts.common.OperatingHour.day:type_name -> hts.common.DayOfWeek
	27, // 1: hts.common.User.nickname:type_name -> google.protobuf.StringValue
	27, // 2: hts.common.User.chula_id:type_name -> google.protobuf.StringValue
	3,  // 3: hts.common.User.gender:type_name -> hts.common.Gender
	27, // 4: hts.common.User.address:type_name -> google.protobuf.StringValue
	27, // 5: hts.common.User.profile_picture_url:type_name -> google.protobuf.StringValue
	27, // 6: hts.common.User.district:type_name -> google.protobuf.StringValue
	27, // 7: hts.common.User.zip_code:type_name -> google.protobuf.StringValue
	27, // 8: hts.common.User.phone_number:type_name -> google.protobuf.StringValue
	27, // 9: hts.common.User.province:type_name -> google.protobuf.StringValue
	28, // 10: hts.common.User.academic_year:type_name -> google.protobuf.Int32Value
	27, // 11: hts.common.Organization.abbreviation:type_name -> google.protobuf.StringValue
	27, // 12: hts.common.Organization.advisor:type_name -> google.protobuf.StringValue
	27, // 13: hts.common.Organization.associated_faculty:type_name -> google.protobuf.StringValue
	27, // 14: hts.common.Organization.description:type_name -> google.protobuf.StringValue
	27, // 15: hts.common.Organization.facebook_page:type_name -> google.protobuf.StringValue
	27, // 16: hts.common.Organization.instagram:type_name -> google.protobuf.StringValue
	27, // 17: hts.common.Organization.line_official_account:type_name -> google.protobuf.StringValue
	27, // 18: hts.common.Organization.email:type_name -> google.protobuf.StringValue
	27, // 19: hts.common.Organization.contact_full_name:type_name -> google.protobuf.StringValue
	27, // 20: hts.common.Organization.contact_email:type_name -> google.protobuf.StringValue
	27, // 21: hts.common.Organization.contact_phone_number:type_name -> google.protobuf.StringValue
	27, // 22: hts.common.Organization.contact_line_id:type_name -> google.protobuf.StringValue
	27, // 23: hts.common.Organization.profile_picture_url:type_name -> google.protobuf.StringValue
	27, // 24: hts.common.Organization.profile_picture_hash:type_name -> google.protobuf.StringValue
	2,  // 25: hts.common.QuestionGroup.type:type_name -> hts.common.QuestionGroupType
	1,  // 26: hts.common.Question.answer_type:type_name -> hts.common.AnswerType
	28, // 27: hts.common.Event.location_id:type_name -> google.protobuf.Int32Value
	27, // 28: hts.common.Event.cover_image_url:type_name -> google.protobuf.StringValue
	27, // 29: hts.common.Event.cover_image_hash:type_name -> google.protobuf.StringValue
	27, // 30: hts.common.Event.poster_image_url:type_name -> google.protobuf.StringValue
	27, // 31: hts.common.Event.poster_image_hash:type_name -> google.protobuf.StringValue
	27, // 32: hts.common.Event.contact:type_name -> google.protobuf.StringValue
	27, // 33: hts.common.Event.profile_image_url:type_name -> google.protobuf.StringValue
	27, // 34: hts.common.Event.profile_image_hash:type_name -> google.protobuf.StringValue
	27, // 35: hts.common.Location.description:type_name -> google.protobuf.StringValue
	27, // 36: hts.common.Location.travel_information_image_url:type_name -> google.protobuf.StringValue
	27, // 37: hts.common.Location.travel_information_image_hash:type_name -> google.protobuf.StringValue
	28, // 38: hts.common.UserEvent.rating:type_name -> google.protobuf.Int32Value
	27, // 39: hts.common.UserEvent.ticket:type_name -> google.protobuf.StringValue
	5,  // 40: hts.common.UserEvent.status:type_name -> hts.common.UserEvent.Status
	29, // 41: hts.common.EventDuration.start:type_name -> google.protobuf.Timestamp
	29, // 42: hts.common.EventDuration.finish:type_name -> google.protobuf.Timestamp
	4,  // 43: hts.common.OrganizationPermission.permission:type_name -> hts.common.Permission
	4,  // 44: hts.common.UserPermission.permission_name:type_name -> hts.common.Permission
	6,  // 45: hts.common.FacilityRequest.status:type_name -> hts.common.FacilityRequest.Status
	27, // 46: hts.common.FacilityRequest.reject_reason:type_name -> google.protobuf.StringValue
	29, // 47: hts.common.FacilityRequest.start:type_name -> google.protobuf.Timestamp
	29, // 48: hts.common.FacilityRequest.finish:type_name -> google.protobuf.Timestamp
	7,  // 49: hts.common.Facility.operating_hours:type_name -> hts.common.OperatingHour
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_hts_common_common_proto_init() }
func file_hts_common_common_proto_init() {
	if File_hts_common_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hts_common_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatingHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hts_common_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hts_common_common_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hts_common_common_proto_goTypes,
		DependencyIndexes: file_hts_common_common_proto_depIdxs,
		EnumInfos:         file_hts_common_common_proto_enumTypes,
		MessageInfos:      file_hts_common_common_proto_msgTypes,
	}.Build()
	File_hts_common_common_proto = out.File
	file_hts_common_common_proto_rawDesc = nil
	file_hts_common_common_proto_goTypes = nil
	file_hts_common_common_proto_depIdxs = nil
}
