// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package facility

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "onepass.app/facility/hts/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	GetFacilityList(ctx context.Context, in *GetFacilityListRequest, opts ...grpc.CallOption) (*GetFacilityListResponse, error)
	GetFacilityRequestList(ctx context.Context, in *GetFacilityRequestListRequest, opts ...grpc.CallOption) (*GetFacilityRequestListResponse, error)
	GetFacilityRequestStatus(ctx context.Context, in *GetFacilityRequestStatusRequest, opts ...grpc.CallOption) (*FacilityRequest, error)
	GetAvailableFacilityList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAvailableFacilityListResponse, error)
	RequestFacilityRequest(ctx context.Context, in *RequestFacilityRequestRequest, opts ...grpc.CallOption) (*FacilityRequest, error)
	ApproveFacilityRequest(ctx context.Context, in *ApproveFacilityRequestRequest, opts ...grpc.CallOption) (*common.Result, error)
	RejectFacilityRequest(ctx context.Context, in *RejectFacilityRequestRequest, opts ...grpc.CallOption) (*common.Result, error)
	GetFacilityInfo(ctx context.Context, in *GetFacilityInfoRequest, opts ...grpc.CallOption) (*Facility, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetFacilityList(ctx context.Context, in *GetFacilityListRequest, opts ...grpc.CallOption) (*GetFacilityListResponse, error) {
	out := new(GetFacilityListResponse)
	err := c.cc.Invoke(ctx, "/hts.facility.AccountService/GetFacilityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFacilityRequestList(ctx context.Context, in *GetFacilityRequestListRequest, opts ...grpc.CallOption) (*GetFacilityRequestListResponse, error) {
	out := new(GetFacilityRequestListResponse)
	err := c.cc.Invoke(ctx, "/hts.facility.AccountService/GetFacilityRequestList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFacilityRequestStatus(ctx context.Context, in *GetFacilityRequestStatusRequest, opts ...grpc.CallOption) (*FacilityRequest, error) {
	out := new(FacilityRequest)
	err := c.cc.Invoke(ctx, "/hts.facility.AccountService/GetFacilityRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAvailableFacilityList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAvailableFacilityListResponse, error) {
	out := new(GetAvailableFacilityListResponse)
	err := c.cc.Invoke(ctx, "/hts.facility.AccountService/GetAvailableFacilityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) RequestFacilityRequest(ctx context.Context, in *RequestFacilityRequestRequest, opts ...grpc.CallOption) (*FacilityRequest, error) {
	out := new(FacilityRequest)
	err := c.cc.Invoke(ctx, "/hts.facility.AccountService/RequestFacilityRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ApproveFacilityRequest(ctx context.Context, in *ApproveFacilityRequestRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.facility.AccountService/ApproveFacilityRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) RejectFacilityRequest(ctx context.Context, in *RejectFacilityRequestRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.facility.AccountService/RejectFacilityRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetFacilityInfo(ctx context.Context, in *GetFacilityInfoRequest, opts ...grpc.CallOption) (*Facility, error) {
	out := new(Facility)
	err := c.cc.Invoke(ctx, "/hts.facility.AccountService/GetFacilityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations should embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	GetFacilityList(context.Context, *GetFacilityListRequest) (*GetFacilityListResponse, error)
	GetFacilityRequestList(context.Context, *GetFacilityRequestListRequest) (*GetFacilityRequestListResponse, error)
	GetFacilityRequestStatus(context.Context, *GetFacilityRequestStatusRequest) (*FacilityRequest, error)
	GetAvailableFacilityList(context.Context, *empty.Empty) (*GetAvailableFacilityListResponse, error)
	RequestFacilityRequest(context.Context, *RequestFacilityRequestRequest) (*FacilityRequest, error)
	ApproveFacilityRequest(context.Context, *ApproveFacilityRequestRequest) (*common.Result, error)
	RejectFacilityRequest(context.Context, *RejectFacilityRequestRequest) (*common.Result, error)
	GetFacilityInfo(context.Context, *GetFacilityInfoRequest) (*Facility, error)
}

// UnimplementedAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) GetFacilityList(context.Context, *GetFacilityListRequest) (*GetFacilityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacilityList not implemented")
}
func (UnimplementedAccountServiceServer) GetFacilityRequestList(context.Context, *GetFacilityRequestListRequest) (*GetFacilityRequestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacilityRequestList not implemented")
}
func (UnimplementedAccountServiceServer) GetFacilityRequestStatus(context.Context, *GetFacilityRequestStatusRequest) (*FacilityRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacilityRequestStatus not implemented")
}
func (UnimplementedAccountServiceServer) GetAvailableFacilityList(context.Context, *empty.Empty) (*GetAvailableFacilityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableFacilityList not implemented")
}
func (UnimplementedAccountServiceServer) RequestFacilityRequest(context.Context, *RequestFacilityRequestRequest) (*FacilityRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFacilityRequest not implemented")
}
func (UnimplementedAccountServiceServer) ApproveFacilityRequest(context.Context, *ApproveFacilityRequestRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveFacilityRequest not implemented")
}
func (UnimplementedAccountServiceServer) RejectFacilityRequest(context.Context, *RejectFacilityRequestRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectFacilityRequest not implemented")
}
func (UnimplementedAccountServiceServer) GetFacilityInfo(context.Context, *GetFacilityInfoRequest) (*Facility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacilityInfo not implemented")
}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetFacilityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFacilityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.facility.AccountService/GetFacilityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFacilityList(ctx, req.(*GetFacilityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFacilityRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilityRequestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFacilityRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.facility.AccountService/GetFacilityRequestList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFacilityRequestList(ctx, req.(*GetFacilityRequestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFacilityRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilityRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFacilityRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.facility.AccountService/GetFacilityRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFacilityRequestStatus(ctx, req.(*GetFacilityRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAvailableFacilityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAvailableFacilityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.facility.AccountService/GetAvailableFacilityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAvailableFacilityList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_RequestFacilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFacilityRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).RequestFacilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.facility.AccountService/RequestFacilityRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).RequestFacilityRequest(ctx, req.(*RequestFacilityRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ApproveFacilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveFacilityRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ApproveFacilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.facility.AccountService/ApproveFacilityRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ApproveFacilityRequest(ctx, req.(*ApproveFacilityRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_RejectFacilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectFacilityRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).RejectFacilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.facility.AccountService/RejectFacilityRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).RejectFacilityRequest(ctx, req.(*RejectFacilityRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetFacilityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetFacilityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.facility.AccountService/GetFacilityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetFacilityInfo(ctx, req.(*GetFacilityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hts.facility.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFacilityList",
			Handler:    _AccountService_GetFacilityList_Handler,
		},
		{
			MethodName: "GetFacilityRequestList",
			Handler:    _AccountService_GetFacilityRequestList_Handler,
		},
		{
			MethodName: "GetFacilityRequestStatus",
			Handler:    _AccountService_GetFacilityRequestStatus_Handler,
		},
		{
			MethodName: "GetAvailableFacilityList",
			Handler:    _AccountService_GetAvailableFacilityList_Handler,
		},
		{
			MethodName: "RequestFacilityRequest",
			Handler:    _AccountService_RequestFacilityRequest_Handler,
		},
		{
			MethodName: "ApproveFacilityRequest",
			Handler:    _AccountService_ApproveFacilityRequest_Handler,
		},
		{
			MethodName: "RejectFacilityRequest",
			Handler:    _AccountService_RejectFacilityRequest_Handler,
		},
		{
			MethodName: "GetFacilityInfo",
			Handler:    _AccountService_GetFacilityInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hts/facility/service.proto",
}
