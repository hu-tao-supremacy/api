// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package participant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	common "onepass.app/facility/hts/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParticipantServiceClient is the client API for ParticipantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParticipantServiceClient interface {
	IsEventAvailable(ctx context.Context, in *IsEventAvailableRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	JoinEvent(ctx context.Context, in *UserWithEventRequest, opts ...grpc.CallOption) (*common.UserEvent, error)
	CancelEvent(ctx context.Context, in *UserWithEventRequest, opts ...grpc.CallOption) (*common.Event, error)
	SubmitAnswersForEventQuestion(ctx context.Context, in *SubmitAnswerForEventQuestionRequest, opts ...grpc.CallOption) (*SubmitAnswerForEventQuestionResponse, error)
	GetEventById(ctx context.Context, in *GetEventByIdRequest, opts ...grpc.CallOption) (*common.Event, error)
	GetAllEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EventsResponse, error)
	GetTagById(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*common.Tag, error)
	GetAllTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TagsResponse, error)
	GetSuggestedEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EventsResponse, error)
	GetUpcomingEvents(ctx context.Context, in *GetUpcomingEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetOnlineEvents(ctx context.Context, in *GetOnlineEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetOnSiteEvents(ctx context.Context, in *GetOnSiteEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetEventsByStringOfName(ctx context.Context, in *StringInputRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetEventsByTagIds(ctx context.Context, in *GetEventsByTagIdsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetEventsByOrganizationId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetEventsByFacilityId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetEventsByDate(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*EventsResponse, error)
	GetLocationById(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*common.Location, error)
	GetTagsByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*TagsResponse, error)
	GetRatingByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetRatingByEventIdResponse, error)
	GetUsersByEventId(ctx context.Context, in *GetUsersByEventIdRequest, opts ...grpc.CallOption) (*GetUsersByEventIdResponse, error)
	GetEventDurationsByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetEventDurationsByEventIdResponse, error)
	GetQuestionGroupsByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetQuestionGroupsByEventIdResponse, error)
	GetQuestionsByQuestionGroupId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetQuestionsByQuestionGroupIdResponse, error)
	GetAnswersByQuestionId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*AnswersResponse, error)
	GetAnswersByUserEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*AnswersResponse, error)
	GetUserAnswerByQuestionId(ctx context.Context, in *GetUserAnswerByQuestionIdRequest, opts ...grpc.CallOption) (*common.Answer, error)
	GetQuestionById(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*common.Question, error)
	GetEventsByUserId(ctx context.Context, in *GetEventsByUserIdRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetUserEventByUserAndEventId(ctx context.Context, in *UserWithEventRequest, opts ...grpc.CallOption) (*common.UserEvent, error)
	GetUserEventsByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetUserEventsByEventIdResponse, error)
	GetPastEventsFromTags(ctx context.Context, in *GetPastEventsFromTagsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	SetRatingByUserEventId(ctx context.Context, in *SetRatingByUserEventIdRequest, opts ...grpc.CallOption) (*common.UserEvent, error)
	GenerateQR(ctx context.Context, in *GenerateQRRequest, opts ...grpc.CallOption) (*GenerateQRResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type participantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParticipantServiceClient(cc grpc.ClientConnInterface) ParticipantServiceClient {
	return &participantServiceClient{cc}
}

func (c *participantServiceClient) IsEventAvailable(ctx context.Context, in *IsEventAvailableRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/IsEventAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) JoinEvent(ctx context.Context, in *UserWithEventRequest, opts ...grpc.CallOption) (*common.UserEvent, error) {
	out := new(common.UserEvent)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/JoinEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) CancelEvent(ctx context.Context, in *UserWithEventRequest, opts ...grpc.CallOption) (*common.Event, error) {
	out := new(common.Event)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/CancelEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) SubmitAnswersForEventQuestion(ctx context.Context, in *SubmitAnswerForEventQuestionRequest, opts ...grpc.CallOption) (*SubmitAnswerForEventQuestionResponse, error) {
	out := new(SubmitAnswerForEventQuestionResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/SubmitAnswersForEventQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetEventById(ctx context.Context, in *GetEventByIdRequest, opts ...grpc.CallOption) (*common.Event, error) {
	out := new(common.Event)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetEventById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetAllEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetAllEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetTagById(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*common.Tag, error) {
	out := new(common.Tag)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetTagById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetAllTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TagsResponse, error) {
	out := new(TagsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetAllTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetSuggestedEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetSuggestedEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetUpcomingEvents(ctx context.Context, in *GetUpcomingEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetUpcomingEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetOnlineEvents(ctx context.Context, in *GetOnlineEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetOnlineEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetOnSiteEvents(ctx context.Context, in *GetOnSiteEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetOnSiteEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetEventsByStringOfName(ctx context.Context, in *StringInputRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetEventsByStringOfName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetEventsByTagIds(ctx context.Context, in *GetEventsByTagIdsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetEventsByTagIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetEventsByOrganizationId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetEventsByOrganizationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetEventsByFacilityId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetEventsByFacilityId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetEventsByDate(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetEventsByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetLocationById(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*common.Location, error) {
	out := new(common.Location)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetLocationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetTagsByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*TagsResponse, error) {
	out := new(TagsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetTagsByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetRatingByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetRatingByEventIdResponse, error) {
	out := new(GetRatingByEventIdResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetRatingByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetUsersByEventId(ctx context.Context, in *GetUsersByEventIdRequest, opts ...grpc.CallOption) (*GetUsersByEventIdResponse, error) {
	out := new(GetUsersByEventIdResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetUsersByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetEventDurationsByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetEventDurationsByEventIdResponse, error) {
	out := new(GetEventDurationsByEventIdResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetEventDurationsByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetQuestionGroupsByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetQuestionGroupsByEventIdResponse, error) {
	out := new(GetQuestionGroupsByEventIdResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetQuestionGroupsByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetQuestionsByQuestionGroupId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetQuestionsByQuestionGroupIdResponse, error) {
	out := new(GetQuestionsByQuestionGroupIdResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetQuestionsByQuestionGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetAnswersByQuestionId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*AnswersResponse, error) {
	out := new(AnswersResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetAnswersByQuestionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetAnswersByUserEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*AnswersResponse, error) {
	out := new(AnswersResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetAnswersByUserEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetUserAnswerByQuestionId(ctx context.Context, in *GetUserAnswerByQuestionIdRequest, opts ...grpc.CallOption) (*common.Answer, error) {
	out := new(common.Answer)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetUserAnswerByQuestionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetQuestionById(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*common.Question, error) {
	out := new(common.Question)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetQuestionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetEventsByUserId(ctx context.Context, in *GetEventsByUserIdRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetEventsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetUserEventByUserAndEventId(ctx context.Context, in *UserWithEventRequest, opts ...grpc.CallOption) (*common.UserEvent, error) {
	out := new(common.UserEvent)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetUserEventByUserAndEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetUserEventsByEventId(ctx context.Context, in *common.GetObjectByIdRequest, opts ...grpc.CallOption) (*GetUserEventsByEventIdResponse, error) {
	out := new(GetUserEventsByEventIdResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetUserEventsByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GetPastEventsFromTags(ctx context.Context, in *GetPastEventsFromTagsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GetPastEventsFromTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) SetRatingByUserEventId(ctx context.Context, in *SetRatingByUserEventIdRequest, opts ...grpc.CallOption) (*common.UserEvent, error) {
	out := new(common.UserEvent)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/SetRatingByUserEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) GenerateQR(ctx context.Context, in *GenerateQRRequest, opts ...grpc.CallOption) (*GenerateQRResponse, error) {
	out := new(GenerateQRResponse)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/GenerateQR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/hts.participant.ParticipantService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParticipantServiceServer is the server API for ParticipantService service.
// All implementations must embed UnimplementedParticipantServiceServer
// for forward compatibility
type ParticipantServiceServer interface {
	IsEventAvailable(context.Context, *IsEventAvailableRequest) (*wrapperspb.BoolValue, error)
	JoinEvent(context.Context, *UserWithEventRequest) (*common.UserEvent, error)
	CancelEvent(context.Context, *UserWithEventRequest) (*common.Event, error)
	SubmitAnswersForEventQuestion(context.Context, *SubmitAnswerForEventQuestionRequest) (*SubmitAnswerForEventQuestionResponse, error)
	GetEventById(context.Context, *GetEventByIdRequest) (*common.Event, error)
	GetAllEvents(context.Context, *emptypb.Empty) (*EventsResponse, error)
	GetTagById(context.Context, *common.GetObjectByIdRequest) (*common.Tag, error)
	GetAllTags(context.Context, *emptypb.Empty) (*TagsResponse, error)
	GetSuggestedEvents(context.Context, *emptypb.Empty) (*EventsResponse, error)
	GetUpcomingEvents(context.Context, *GetUpcomingEventsRequest) (*EventsResponse, error)
	GetOnlineEvents(context.Context, *GetOnlineEventsRequest) (*EventsResponse, error)
	GetOnSiteEvents(context.Context, *GetOnSiteEventsRequest) (*EventsResponse, error)
	GetEventsByStringOfName(context.Context, *StringInputRequest) (*EventsResponse, error)
	GetEventsByTagIds(context.Context, *GetEventsByTagIdsRequest) (*EventsResponse, error)
	GetEventsByOrganizationId(context.Context, *common.GetObjectByIdRequest) (*EventsResponse, error)
	GetEventsByFacilityId(context.Context, *common.GetObjectByIdRequest) (*EventsResponse, error)
	GetEventsByDate(context.Context, *timestamppb.Timestamp) (*EventsResponse, error)
	GetLocationById(context.Context, *common.GetObjectByIdRequest) (*common.Location, error)
	GetTagsByEventId(context.Context, *common.GetObjectByIdRequest) (*TagsResponse, error)
	GetRatingByEventId(context.Context, *common.GetObjectByIdRequest) (*GetRatingByEventIdResponse, error)
	GetUsersByEventId(context.Context, *GetUsersByEventIdRequest) (*GetUsersByEventIdResponse, error)
	GetEventDurationsByEventId(context.Context, *common.GetObjectByIdRequest) (*GetEventDurationsByEventIdResponse, error)
	GetQuestionGroupsByEventId(context.Context, *common.GetObjectByIdRequest) (*GetQuestionGroupsByEventIdResponse, error)
	GetQuestionsByQuestionGroupId(context.Context, *common.GetObjectByIdRequest) (*GetQuestionsByQuestionGroupIdResponse, error)
	GetAnswersByQuestionId(context.Context, *common.GetObjectByIdRequest) (*AnswersResponse, error)
	GetAnswersByUserEventId(context.Context, *common.GetObjectByIdRequest) (*AnswersResponse, error)
	GetUserAnswerByQuestionId(context.Context, *GetUserAnswerByQuestionIdRequest) (*common.Answer, error)
	GetQuestionById(context.Context, *common.GetObjectByIdRequest) (*common.Question, error)
	GetEventsByUserId(context.Context, *GetEventsByUserIdRequest) (*EventsResponse, error)
	GetUserEventByUserAndEventId(context.Context, *UserWithEventRequest) (*common.UserEvent, error)
	GetUserEventsByEventId(context.Context, *common.GetObjectByIdRequest) (*GetUserEventsByEventIdResponse, error)
	GetPastEventsFromTags(context.Context, *GetPastEventsFromTagsRequest) (*EventsResponse, error)
	SetRatingByUserEventId(context.Context, *SetRatingByUserEventIdRequest) (*common.UserEvent, error)
	GenerateQR(context.Context, *GenerateQRRequest) (*GenerateQRResponse, error)
	Ping(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedParticipantServiceServer()
}

// UnimplementedParticipantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParticipantServiceServer struct {
}

func (UnimplementedParticipantServiceServer) IsEventAvailable(context.Context, *IsEventAvailableRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEventAvailable not implemented")
}
func (UnimplementedParticipantServiceServer) JoinEvent(context.Context, *UserWithEventRequest) (*common.UserEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinEvent not implemented")
}
func (UnimplementedParticipantServiceServer) CancelEvent(context.Context, *UserWithEventRequest) (*common.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelEvent not implemented")
}
func (UnimplementedParticipantServiceServer) SubmitAnswersForEventQuestion(context.Context, *SubmitAnswerForEventQuestionRequest) (*SubmitAnswerForEventQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswersForEventQuestion not implemented")
}
func (UnimplementedParticipantServiceServer) GetEventById(context.Context, *GetEventByIdRequest) (*common.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventById not implemented")
}
func (UnimplementedParticipantServiceServer) GetAllEvents(context.Context, *emptypb.Empty) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEvents not implemented")
}
func (UnimplementedParticipantServiceServer) GetTagById(context.Context, *common.GetObjectByIdRequest) (*common.Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagById not implemented")
}
func (UnimplementedParticipantServiceServer) GetAllTags(context.Context, *emptypb.Empty) (*TagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTags not implemented")
}
func (UnimplementedParticipantServiceServer) GetSuggestedEvents(context.Context, *emptypb.Empty) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedEvents not implemented")
}
func (UnimplementedParticipantServiceServer) GetUpcomingEvents(context.Context, *GetUpcomingEventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingEvents not implemented")
}
func (UnimplementedParticipantServiceServer) GetOnlineEvents(context.Context, *GetOnlineEventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineEvents not implemented")
}
func (UnimplementedParticipantServiceServer) GetOnSiteEvents(context.Context, *GetOnSiteEventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnSiteEvents not implemented")
}
func (UnimplementedParticipantServiceServer) GetEventsByStringOfName(context.Context, *StringInputRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByStringOfName not implemented")
}
func (UnimplementedParticipantServiceServer) GetEventsByTagIds(context.Context, *GetEventsByTagIdsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByTagIds not implemented")
}
func (UnimplementedParticipantServiceServer) GetEventsByOrganizationId(context.Context, *common.GetObjectByIdRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByOrganizationId not implemented")
}
func (UnimplementedParticipantServiceServer) GetEventsByFacilityId(context.Context, *common.GetObjectByIdRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByFacilityId not implemented")
}
func (UnimplementedParticipantServiceServer) GetEventsByDate(context.Context, *timestamppb.Timestamp) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByDate not implemented")
}
func (UnimplementedParticipantServiceServer) GetLocationById(context.Context, *common.GetObjectByIdRequest) (*common.Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationById not implemented")
}
func (UnimplementedParticipantServiceServer) GetTagsByEventId(context.Context, *common.GetObjectByIdRequest) (*TagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsByEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GetRatingByEventId(context.Context, *common.GetObjectByIdRequest) (*GetRatingByEventIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingByEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GetUsersByEventId(context.Context, *GetUsersByEventIdRequest) (*GetUsersByEventIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GetEventDurationsByEventId(context.Context, *common.GetObjectByIdRequest) (*GetEventDurationsByEventIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventDurationsByEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GetQuestionGroupsByEventId(context.Context, *common.GetObjectByIdRequest) (*GetQuestionGroupsByEventIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionGroupsByEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GetQuestionsByQuestionGroupId(context.Context, *common.GetObjectByIdRequest) (*GetQuestionsByQuestionGroupIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionsByQuestionGroupId not implemented")
}
func (UnimplementedParticipantServiceServer) GetAnswersByQuestionId(context.Context, *common.GetObjectByIdRequest) (*AnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswersByQuestionId not implemented")
}
func (UnimplementedParticipantServiceServer) GetAnswersByUserEventId(context.Context, *common.GetObjectByIdRequest) (*AnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswersByUserEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GetUserAnswerByQuestionId(context.Context, *GetUserAnswerByQuestionIdRequest) (*common.Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAnswerByQuestionId not implemented")
}
func (UnimplementedParticipantServiceServer) GetQuestionById(context.Context, *common.GetObjectByIdRequest) (*common.Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionById not implemented")
}
func (UnimplementedParticipantServiceServer) GetEventsByUserId(context.Context, *GetEventsByUserIdRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByUserId not implemented")
}
func (UnimplementedParticipantServiceServer) GetUserEventByUserAndEventId(context.Context, *UserWithEventRequest) (*common.UserEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEventByUserAndEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GetUserEventsByEventId(context.Context, *common.GetObjectByIdRequest) (*GetUserEventsByEventIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEventsByEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GetPastEventsFromTags(context.Context, *GetPastEventsFromTagsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPastEventsFromTags not implemented")
}
func (UnimplementedParticipantServiceServer) SetRatingByUserEventId(context.Context, *SetRatingByUserEventIdRequest) (*common.UserEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRatingByUserEventId not implemented")
}
func (UnimplementedParticipantServiceServer) GenerateQR(context.Context, *GenerateQRRequest) (*GenerateQRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQR not implemented")
}
func (UnimplementedParticipantServiceServer) Ping(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedParticipantServiceServer) mustEmbedUnimplementedParticipantServiceServer() {}

// UnsafeParticipantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParticipantServiceServer will
// result in compilation errors.
type UnsafeParticipantServiceServer interface {
	mustEmbedUnimplementedParticipantServiceServer()
}

func RegisterParticipantServiceServer(s grpc.ServiceRegistrar, srv ParticipantServiceServer) {
	s.RegisterService(&ParticipantService_ServiceDesc, srv)
}

func _ParticipantService_IsEventAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEventAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).IsEventAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/IsEventAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).IsEventAvailable(ctx, req.(*IsEventAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_JoinEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).JoinEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/JoinEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).JoinEvent(ctx, req.(*UserWithEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_CancelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).CancelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/CancelEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).CancelEvent(ctx, req.(*UserWithEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_SubmitAnswersForEventQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerForEventQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).SubmitAnswersForEventQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/SubmitAnswersForEventQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).SubmitAnswersForEventQuestion(ctx, req.(*SubmitAnswerForEventQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetEventById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetEventById(ctx, req.(*GetEventByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetAllEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetAllEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetAllEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetAllEvents(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetTagById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetTagById(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetAllTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetAllTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetAllTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetAllTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetSuggestedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetSuggestedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetSuggestedEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetSuggestedEvents(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetUpcomingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetUpcomingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetUpcomingEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetUpcomingEvents(ctx, req.(*GetUpcomingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetOnlineEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetOnlineEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetOnlineEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetOnlineEvents(ctx, req.(*GetOnlineEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetOnSiteEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnSiteEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetOnSiteEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetOnSiteEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetOnSiteEvents(ctx, req.(*GetOnSiteEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetEventsByStringOfName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetEventsByStringOfName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetEventsByStringOfName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetEventsByStringOfName(ctx, req.(*StringInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetEventsByTagIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsByTagIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetEventsByTagIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetEventsByTagIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetEventsByTagIds(ctx, req.(*GetEventsByTagIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetEventsByOrganizationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetEventsByOrganizationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetEventsByOrganizationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetEventsByOrganizationId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetEventsByFacilityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetEventsByFacilityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetEventsByFacilityId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetEventsByFacilityId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetEventsByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamppb.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetEventsByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetEventsByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetEventsByDate(ctx, req.(*timestamppb.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetLocationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetLocationById(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetTagsByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetTagsByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetTagsByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetTagsByEventId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetRatingByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetRatingByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetRatingByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetRatingByEventId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetUsersByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByEventIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetUsersByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetUsersByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetUsersByEventId(ctx, req.(*GetUsersByEventIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetEventDurationsByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetEventDurationsByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetEventDurationsByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetEventDurationsByEventId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetQuestionGroupsByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetQuestionGroupsByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetQuestionGroupsByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetQuestionGroupsByEventId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetQuestionsByQuestionGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetQuestionsByQuestionGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetQuestionsByQuestionGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetQuestionsByQuestionGroupId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetAnswersByQuestionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetAnswersByQuestionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetAnswersByQuestionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetAnswersByQuestionId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetAnswersByUserEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetAnswersByUserEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetAnswersByUserEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetAnswersByUserEventId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetUserAnswerByQuestionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAnswerByQuestionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetUserAnswerByQuestionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetUserAnswerByQuestionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetUserAnswerByQuestionId(ctx, req.(*GetUserAnswerByQuestionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetQuestionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetQuestionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetQuestionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetQuestionById(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetEventsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetEventsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetEventsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetEventsByUserId(ctx, req.(*GetEventsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetUserEventByUserAndEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetUserEventByUserAndEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetUserEventByUserAndEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetUserEventByUserAndEventId(ctx, req.(*UserWithEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetUserEventsByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetUserEventsByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetUserEventsByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetUserEventsByEventId(ctx, req.(*common.GetObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GetPastEventsFromTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPastEventsFromTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GetPastEventsFromTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GetPastEventsFromTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GetPastEventsFromTags(ctx, req.(*GetPastEventsFromTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_SetRatingByUserEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatingByUserEventIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).SetRatingByUserEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/SetRatingByUserEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).SetRatingByUserEventId(ctx, req.(*SetRatingByUserEventIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_GenerateQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).GenerateQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/GenerateQR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).GenerateQR(ctx, req.(*GenerateQRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.participant.ParticipantService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ParticipantService_ServiceDesc is the grpc.ServiceDesc for ParticipantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParticipantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hts.participant.ParticipantService",
	HandlerType: (*ParticipantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsEventAvailable",
			Handler:    _ParticipantService_IsEventAvailable_Handler,
		},
		{
			MethodName: "JoinEvent",
			Handler:    _ParticipantService_JoinEvent_Handler,
		},
		{
			MethodName: "CancelEvent",
			Handler:    _ParticipantService_CancelEvent_Handler,
		},
		{
			MethodName: "SubmitAnswersForEventQuestion",
			Handler:    _ParticipantService_SubmitAnswersForEventQuestion_Handler,
		},
		{
			MethodName: "GetEventById",
			Handler:    _ParticipantService_GetEventById_Handler,
		},
		{
			MethodName: "GetAllEvents",
			Handler:    _ParticipantService_GetAllEvents_Handler,
		},
		{
			MethodName: "GetTagById",
			Handler:    _ParticipantService_GetTagById_Handler,
		},
		{
			MethodName: "GetAllTags",
			Handler:    _ParticipantService_GetAllTags_Handler,
		},
		{
			MethodName: "GetSuggestedEvents",
			Handler:    _ParticipantService_GetSuggestedEvents_Handler,
		},
		{
			MethodName: "GetUpcomingEvents",
			Handler:    _ParticipantService_GetUpcomingEvents_Handler,
		},
		{
			MethodName: "GetOnlineEvents",
			Handler:    _ParticipantService_GetOnlineEvents_Handler,
		},
		{
			MethodName: "GetOnSiteEvents",
			Handler:    _ParticipantService_GetOnSiteEvents_Handler,
		},
		{
			MethodName: "GetEventsByStringOfName",
			Handler:    _ParticipantService_GetEventsByStringOfName_Handler,
		},
		{
			MethodName: "GetEventsByTagIds",
			Handler:    _ParticipantService_GetEventsByTagIds_Handler,
		},
		{
			MethodName: "GetEventsByOrganizationId",
			Handler:    _ParticipantService_GetEventsByOrganizationId_Handler,
		},
		{
			MethodName: "GetEventsByFacilityId",
			Handler:    _ParticipantService_GetEventsByFacilityId_Handler,
		},
		{
			MethodName: "GetEventsByDate",
			Handler:    _ParticipantService_GetEventsByDate_Handler,
		},
		{
			MethodName: "GetLocationById",
			Handler:    _ParticipantService_GetLocationById_Handler,
		},
		{
			MethodName: "GetTagsByEventId",
			Handler:    _ParticipantService_GetTagsByEventId_Handler,
		},
		{
			MethodName: "GetRatingByEventId",
			Handler:    _ParticipantService_GetRatingByEventId_Handler,
		},
		{
			MethodName: "GetUsersByEventId",
			Handler:    _ParticipantService_GetUsersByEventId_Handler,
		},
		{
			MethodName: "GetEventDurationsByEventId",
			Handler:    _ParticipantService_GetEventDurationsByEventId_Handler,
		},
		{
			MethodName: "GetQuestionGroupsByEventId",
			Handler:    _ParticipantService_GetQuestionGroupsByEventId_Handler,
		},
		{
			MethodName: "GetQuestionsByQuestionGroupId",
			Handler:    _ParticipantService_GetQuestionsByQuestionGroupId_Handler,
		},
		{
			MethodName: "GetAnswersByQuestionId",
			Handler:    _ParticipantService_GetAnswersByQuestionId_Handler,
		},
		{
			MethodName: "GetAnswersByUserEventId",
			Handler:    _ParticipantService_GetAnswersByUserEventId_Handler,
		},
		{
			MethodName: "GetUserAnswerByQuestionId",
			Handler:    _ParticipantService_GetUserAnswerByQuestionId_Handler,
		},
		{
			MethodName: "GetQuestionById",
			Handler:    _ParticipantService_GetQuestionById_Handler,
		},
		{
			MethodName: "GetEventsByUserId",
			Handler:    _ParticipantService_GetEventsByUserId_Handler,
		},
		{
			MethodName: "GetUserEventByUserAndEventId",
			Handler:    _ParticipantService_GetUserEventByUserAndEventId_Handler,
		},
		{
			MethodName: "GetUserEventsByEventId",
			Handler:    _ParticipantService_GetUserEventsByEventId_Handler,
		},
		{
			MethodName: "GetPastEventsFromTags",
			Handler:    _ParticipantService_GetPastEventsFromTags_Handler,
		},
		{
			MethodName: "SetRatingByUserEventId",
			Handler:    _ParticipantService_SetRatingByUserEventId_Handler,
		},
		{
			MethodName: "GenerateQR",
			Handler:    _ParticipantService_GenerateQR_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ParticipantService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hts/participant/service.proto",
}
