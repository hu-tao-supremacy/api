// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package organizer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	common "onepass.app/facility/hts/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganizerServiceClient is the client API for OrganizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizerServiceClient interface {
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error)
	GetOrganization(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	GetOrganizationById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetOrganizationByIdResponse, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error)
	RemoveOrganization(ctx context.Context, in *RemoveOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error)
	AddUsersToOrganization(ctx context.Context, in *UpdateUsersInOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error)
	RemoveUsersFromOrganization(ctx context.Context, in *UpdateUsersInOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*common.Result, error)
	GetEvent(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	GetEventById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetEventByIdResponse, error)
	UpdateEventInfo(ctx context.Context, in *UpdateEventInfoRequest, opts ...grpc.CallOption) (*common.Result, error)
	UpdateEventFacility(ctx context.Context, in *UpdateEventFacilityRequest, opts ...grpc.CallOption) (*common.Result, error)
	UpdateEventDuration(ctx context.Context, in *UpdateEventDurationRequest, opts ...grpc.CallOption) (*common.Result, error)
	RemoveEvent(ctx context.Context, in *RemoveEventRequest, opts ...grpc.CallOption) (*common.Result, error)
	UpdateRegistrationRequest(ctx context.Context, in *UpdateRegistrationRequestRequest, opts ...grpc.CallOption) (*common.Result, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*common.Result, error)
	AddTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*common.Result, error)
	RemoveTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*common.Result, error)
	GetTag(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GetTagResponse, error)
	GetTagById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetTagByIdResponse, error)
	HasEvent(ctx context.Context, in *HasEventRequest, opts ...grpc.CallOption) (*common.Result, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Result, error)
}

type organizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizerServiceClient(cc grpc.ClientConnInterface) OrganizerServiceClient {
	return &organizerServiceClient{cc}
}

func (c *organizerServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetOrganization(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetOrganizationById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetOrganizationByIdResponse, error) {
	out := new(GetOrganizationByIdResponse)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/GetOrganizationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) RemoveOrganization(ctx context.Context, in *RemoveOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/RemoveOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) AddUsersToOrganization(ctx context.Context, in *UpdateUsersInOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/AddUsersToOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) RemoveUsersFromOrganization(ctx context.Context, in *UpdateUsersInOrganizationRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/RemoveUsersFromOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetEvent(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetEventById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetEventByIdResponse, error) {
	out := new(GetEventByIdResponse)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/GetEventById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) UpdateEventInfo(ctx context.Context, in *UpdateEventInfoRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/UpdateEventInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) UpdateEventFacility(ctx context.Context, in *UpdateEventFacilityRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/UpdateEventFacility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) UpdateEventDuration(ctx context.Context, in *UpdateEventDurationRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/UpdateEventDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) RemoveEvent(ctx context.Context, in *RemoveEventRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/RemoveEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) UpdateRegistrationRequest(ctx context.Context, in *UpdateRegistrationRequestRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/UpdateRegistrationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) AddTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/AddTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) RemoveTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/RemoveTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetTag(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GetTagResponse, error) {
	out := new(GetTagResponse)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetTagById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetTagByIdResponse, error) {
	out := new(GetTagByIdResponse)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/GetTagById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) HasEvent(ctx context.Context, in *HasEventRequest, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/HasEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/hts.organizer.OrganizerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizerServiceServer is the server API for OrganizerService service.
// All implementations should embed UnimplementedOrganizerServiceServer
// for forward compatibility
type OrganizerServiceServer interface {
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*common.Result, error)
	GetOrganization(context.Context, *UserRequest) (*GetOrganizationResponse, error)
	GetOrganizationById(context.Context, *GetByIdRequest) (*GetOrganizationByIdResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*common.Result, error)
	RemoveOrganization(context.Context, *RemoveOrganizationRequest) (*common.Result, error)
	AddUsersToOrganization(context.Context, *UpdateUsersInOrganizationRequest) (*common.Result, error)
	RemoveUsersFromOrganization(context.Context, *UpdateUsersInOrganizationRequest) (*common.Result, error)
	CreateEvent(context.Context, *CreateEventRequest) (*common.Result, error)
	GetEvent(context.Context, *UserRequest) (*GetEventResponse, error)
	GetEventById(context.Context, *GetByIdRequest) (*GetEventByIdResponse, error)
	UpdateEventInfo(context.Context, *UpdateEventInfoRequest) (*common.Result, error)
	UpdateEventFacility(context.Context, *UpdateEventFacilityRequest) (*common.Result, error)
	UpdateEventDuration(context.Context, *UpdateEventDurationRequest) (*common.Result, error)
	RemoveEvent(context.Context, *RemoveEventRequest) (*common.Result, error)
	UpdateRegistrationRequest(context.Context, *UpdateRegistrationRequestRequest) (*common.Result, error)
	CreateTag(context.Context, *CreateTagRequest) (*common.Result, error)
	AddTag(context.Context, *UpdateTagRequest) (*common.Result, error)
	RemoveTag(context.Context, *UpdateTagRequest) (*common.Result, error)
	GetTag(context.Context, *UserRequest) (*GetTagResponse, error)
	GetTagById(context.Context, *GetByIdRequest) (*GetTagByIdResponse, error)
	HasEvent(context.Context, *HasEventRequest) (*common.Result, error)
	Ping(context.Context, *emptypb.Empty) (*common.Result, error)
}

// UnimplementedOrganizerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrganizerServiceServer struct {
}

func (UnimplementedOrganizerServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedOrganizerServiceServer) GetOrganization(context.Context, *UserRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizerServiceServer) GetOrganizationById(context.Context, *GetByIdRequest) (*GetOrganizationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationById not implemented")
}
func (UnimplementedOrganizerServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrganizerServiceServer) RemoveOrganization(context.Context, *RemoveOrganizationRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganization not implemented")
}
func (UnimplementedOrganizerServiceServer) AddUsersToOrganization(context.Context, *UpdateUsersInOrganizationRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToOrganization not implemented")
}
func (UnimplementedOrganizerServiceServer) RemoveUsersFromOrganization(context.Context, *UpdateUsersInOrganizationRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsersFromOrganization not implemented")
}
func (UnimplementedOrganizerServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedOrganizerServiceServer) GetEvent(context.Context, *UserRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedOrganizerServiceServer) GetEventById(context.Context, *GetByIdRequest) (*GetEventByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventById not implemented")
}
func (UnimplementedOrganizerServiceServer) UpdateEventInfo(context.Context, *UpdateEventInfoRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventInfo not implemented")
}
func (UnimplementedOrganizerServiceServer) UpdateEventFacility(context.Context, *UpdateEventFacilityRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventFacility not implemented")
}
func (UnimplementedOrganizerServiceServer) UpdateEventDuration(context.Context, *UpdateEventDurationRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventDuration not implemented")
}
func (UnimplementedOrganizerServiceServer) RemoveEvent(context.Context, *RemoveEventRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEvent not implemented")
}
func (UnimplementedOrganizerServiceServer) UpdateRegistrationRequest(context.Context, *UpdateRegistrationRequestRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistrationRequest not implemented")
}
func (UnimplementedOrganizerServiceServer) CreateTag(context.Context, *CreateTagRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedOrganizerServiceServer) AddTag(context.Context, *UpdateTagRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedOrganizerServiceServer) RemoveTag(context.Context, *UpdateTagRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTag not implemented")
}
func (UnimplementedOrganizerServiceServer) GetTag(context.Context, *UserRequest) (*GetTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedOrganizerServiceServer) GetTagById(context.Context, *GetByIdRequest) (*GetTagByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagById not implemented")
}
func (UnimplementedOrganizerServiceServer) HasEvent(context.Context, *HasEventRequest) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasEvent not implemented")
}
func (UnimplementedOrganizerServiceServer) Ping(context.Context, *emptypb.Empty) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeOrganizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizerServiceServer will
// result in compilation errors.
type UnsafeOrganizerServiceServer interface {
	mustEmbedUnimplementedOrganizerServiceServer()
}

func RegisterOrganizerServiceServer(s grpc.ServiceRegistrar, srv OrganizerServiceServer) {
	s.RegisterService(&OrganizerService_ServiceDesc, srv)
}

func _OrganizerService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetOrganization(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetOrganizationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetOrganizationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/GetOrganizationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetOrganizationById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_RemoveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).RemoveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/RemoveOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).RemoveOrganization(ctx, req.(*RemoveOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_AddUsersToOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsersInOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).AddUsersToOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/AddUsersToOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).AddUsersToOrganization(ctx, req.(*UpdateUsersInOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_RemoveUsersFromOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsersInOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).RemoveUsersFromOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/RemoveUsersFromOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).RemoveUsersFromOrganization(ctx, req.(*UpdateUsersInOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetEvent(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/GetEventById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetEventById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_UpdateEventInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).UpdateEventInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/UpdateEventInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).UpdateEventInfo(ctx, req.(*UpdateEventInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_UpdateEventFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).UpdateEventFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/UpdateEventFacility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).UpdateEventFacility(ctx, req.(*UpdateEventFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_UpdateEventDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).UpdateEventDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/UpdateEventDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).UpdateEventDuration(ctx, req.(*UpdateEventDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_RemoveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).RemoveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/RemoveEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).RemoveEvent(ctx, req.(*RemoveEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_UpdateRegistrationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).UpdateRegistrationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/UpdateRegistrationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).UpdateRegistrationRequest(ctx, req.(*UpdateRegistrationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).AddTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/RemoveTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).RemoveTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetTag(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/GetTagById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetTagById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_HasEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).HasEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/HasEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).HasEvent(ctx, req.(*HasEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hts.organizer.OrganizerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizerService_ServiceDesc is the grpc.ServiceDesc for OrganizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hts.organizer.OrganizerService",
	HandlerType: (*OrganizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizerService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizerService_GetOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationById",
			Handler:    _OrganizerService_GetOrganizationById_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizerService_UpdateOrganization_Handler,
		},
		{
			MethodName: "RemoveOrganization",
			Handler:    _OrganizerService_RemoveOrganization_Handler,
		},
		{
			MethodName: "AddUsersToOrganization",
			Handler:    _OrganizerService_AddUsersToOrganization_Handler,
		},
		{
			MethodName: "RemoveUsersFromOrganization",
			Handler:    _OrganizerService_RemoveUsersFromOrganization_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _OrganizerService_CreateEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _OrganizerService_GetEvent_Handler,
		},
		{
			MethodName: "GetEventById",
			Handler:    _OrganizerService_GetEventById_Handler,
		},
		{
			MethodName: "UpdateEventInfo",
			Handler:    _OrganizerService_UpdateEventInfo_Handler,
		},
		{
			MethodName: "UpdateEventFacility",
			Handler:    _OrganizerService_UpdateEventFacility_Handler,
		},
		{
			MethodName: "UpdateEventDuration",
			Handler:    _OrganizerService_UpdateEventDuration_Handler,
		},
		{
			MethodName: "RemoveEvent",
			Handler:    _OrganizerService_RemoveEvent_Handler,
		},
		{
			MethodName: "UpdateRegistrationRequest",
			Handler:    _OrganizerService_UpdateRegistrationRequest_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _OrganizerService_CreateTag_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _OrganizerService_AddTag_Handler,
		},
		{
			MethodName: "RemoveTag",
			Handler:    _OrganizerService_RemoveTag_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _OrganizerService_GetTag_Handler,
		},
		{
			MethodName: "GetTagById",
			Handler:    _OrganizerService_GetTagById_Handler,
		},
		{
			MethodName: "HasEvent",
			Handler:    _OrganizerService_HasEvent_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _OrganizerService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hts/organizer/service.proto",
}
